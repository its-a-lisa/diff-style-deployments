// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m7fbwwwhvmCQvGDQZtaomB
// Component: hGNmlWVElS_6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsjxpgLZwIOiPd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JxpgLZwIOiPd/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: I4QQYc_H8onv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: m7fbwwwhvmCQvGDQZtaomB/projectcss
import sty from "./PlasmicLayoutBottomFooter.module.css"; // plasmic-import: hGNmlWVElS_6/css

createPlasmicElementProxy;

export type PlasmicLayoutBottomFooter__VariantMembers = {};
export type PlasmicLayoutBottomFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayoutBottomFooter__VariantsArgs;
export const PlasmicLayoutBottomFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLayoutBottomFooter__ArgsType = {};
type ArgPropType = keyof PlasmicLayoutBottomFooter__ArgsType;
export const PlasmicLayoutBottomFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicLayoutBottomFooter__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  copyRight?: Flex__<"p">;
  socialIcons?: Flex__<"div">;
  twitter?: Flex__<typeof PlasmicImg__>;
  facebook?: Flex__<typeof PlasmicImg__>;
  youtube?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  vimeo?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultLayoutBottomFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayoutBottomFooter__RenderFunc(props: {
  variants: PlasmicLayoutBottomFooter__VariantsArgs;
  args: PlasmicLayoutBottomFooter__ArgsType;
  overrides: PlasmicLayoutBottomFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjxpgLZwIOiPd(),
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__lpNo2)}>
          <p
            data-plasmic-name={"copyRight"}
            data-plasmic-override={overrides.copyRight}
            className={classNames(
              projectcss.all,
              projectcss.p,
              projectcss.__wab_text,
              sty.copyRight
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "\u00a9 Company. All rights reserved. This site proudly built with "
                }
              </React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__zx4Lp
                  )}
                  component={Link}
                  href={"https://www.plasmic.app"}
                  platform={"nextjs"}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Plasmic"
                    : "Plasmic"}
                </PlasmicLink__>
              }
              <React.Fragment>{"."}</React.Fragment>
            </React.Fragment>
          </p>
        </div>
        <div className={classNames(projectcss.all, sty.column__hUvop)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"socialIcons"}
            data-plasmic-override={overrides.socialIcons}
            hasGap={true}
            className={classNames(projectcss.all, sty.socialIcons)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__lMPjE
              )}
              component={Link}
              href={"https://twitter.com/"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <PlasmicImg__
                data-plasmic-name={"twitter"}
                data-plasmic-override={overrides.twitter}
                alt={""}
                className={classNames(sty.twitter)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/fb_diff_style_deployments/images/icons8TwitterSvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__tYaY9
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <PlasmicImg__
                data-plasmic-name={"facebook"}
                data-plasmic-override={overrides.facebook}
                alt={""}
                className={classNames(sty.facebook)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/fb_diff_style_deployments/images/icons8FacebookSvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__asX0F
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <PlasmicImg__
                data-plasmic-name={"youtube"}
                data-plasmic-override={overrides.youtube}
                alt={""}
                className={classNames(sty.youtube)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"30px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/fb_diff_style_deployments/images/icons8YoutubeSvg.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__rVqat
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <PlasmicImg__
                  data-plasmic-name={"vimeo"}
                  data-plasmic-override={overrides.vimeo}
                  alt={""}
                  className={classNames(sty.vimeo)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/fb_diff_style_deployments/images/icons8VimeoSvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </div>
            </PlasmicLink__>
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "copyRight",
    "socialIcons",
    "twitter",
    "facebook",
    "youtube",
    "freeBox",
    "vimeo"
  ],
  columns: [
    "columns",
    "copyRight",
    "socialIcons",
    "twitter",
    "facebook",
    "youtube",
    "freeBox",
    "vimeo"
  ],
  copyRight: ["copyRight"],
  socialIcons: [
    "socialIcons",
    "twitter",
    "facebook",
    "youtube",
    "freeBox",
    "vimeo"
  ],
  twitter: ["twitter"],
  facebook: ["facebook"],
  youtube: ["youtube"],
  freeBox: ["freeBox", "vimeo"],
  vimeo: ["vimeo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  copyRight: "p";
  socialIcons: "div";
  twitter: typeof PlasmicImg__;
  facebook: typeof PlasmicImg__;
  youtube: typeof PlasmicImg__;
  freeBox: "div";
  vimeo: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayoutBottomFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayoutBottomFooter__VariantsArgs;
    args?: PlasmicLayoutBottomFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayoutBottomFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayoutBottomFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayoutBottomFooter__ArgProps,
          internalVariantPropNames: PlasmicLayoutBottomFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayoutBottomFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayoutBottomFooter";
  } else {
    func.displayName = `PlasmicLayoutBottomFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicLayoutBottomFooter = Object.assign(
  // Top-level PlasmicLayoutBottomFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    copyRight: makeNodeComponent("copyRight"),
    socialIcons: makeNodeComponent("socialIcons"),
    twitter: makeNodeComponent("twitter"),
    facebook: makeNodeComponent("facebook"),
    youtube: makeNodeComponent("youtube"),
    freeBox: makeNodeComponent("freeBox"),
    vimeo: makeNodeComponent("vimeo"),

    // Metadata about props expected for PlasmicLayoutBottomFooter
    internalVariantProps: PlasmicLayoutBottomFooter__VariantProps,
    internalArgProps: PlasmicLayoutBottomFooter__ArgProps
  }
);

export default PlasmicLayoutBottomFooter;
/* prettier-ignore-end */
