// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m7fbwwwhvmCQvGDQZtaomB
// Component: wosQUa3hJSox

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsjxpgLZwIOiPd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JxpgLZwIOiPd/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: I4QQYc_H8onv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: m7fbwwwhvmCQvGDQZtaomB/projectcss
import sty from "./PlasmicSection2.module.css"; // plasmic-import: wosQUa3hJSox/css

createPlasmicElementProxy;

export type PlasmicSection2__VariantMembers = {};
export type PlasmicSection2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection2__VariantsArgs;
export const PlasmicSection2__VariantProps = new Array<VariantPropType>();

export type PlasmicSection2__ArgsType = {};
type ArgPropType = keyof PlasmicSection2__ArgsType;
export const PlasmicSection2__ArgProps = new Array<ArgPropType>();

export type PlasmicSection2__OverridesType = {
  section2?: Flex__<"section">;
  subHeading?: Flex__<"h2">;
  logoContainer?: Flex__<"div">;
};

export interface DefaultSection2Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection2__RenderFunc(props: {
  variants: PlasmicSection2__VariantsArgs;
  args: PlasmicSection2__ArgsType;
  overrides: PlasmicSection2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjxpgLZwIOiPd(),
    theme: useTheme()
  });

  return (
    <Stack__
      as={"section"}
      data-plasmic-name={"section2"}
      data-plasmic-override={overrides.section2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section2,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <h2
        data-plasmic-name={"subHeading"}
        data-plasmic-override={overrides.subHeading}
        className={classNames(
          projectcss.all,
          projectcss.h2,
          projectcss.__wab_text,
          sty.subHeading
        )}
      >
        {"Used by marketers at:"}
      </h2>
      <Stack__
        as={"div"}
        data-plasmic-name={"logoContainer"}
        data-plasmic-override={overrides.logoContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.logoContainer)}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__o1GdI)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "77px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "100px"
              : "180px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group3.svg",
            fullWidth: 180,
            fullHeight: 77,
            aspectRatio: 2.337662
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__j2Ka)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "85px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "100px"
              : "180px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group6.svg",
            fullWidth: 180,
            fullHeight: 85,
            aspectRatio: 2.117647
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__kM1EF)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "66px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "120px"
              : "157px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group.svg",
            fullWidth: 157,
            fullHeight: 66,
            aspectRatio: 2.378788
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__s6EZw)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "auto"
              : "80.999px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "100px"
              : "164.999px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group5.svg",
            fullWidth: 164.999,
            fullHeight: 80.999,
            aspectRatio: 2.037037
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__s8HtU)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "auto"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "100px"
              : "143px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group7.svg",
            fullWidth: 143,
            fullHeight: 91,
            aspectRatio: 1.571429
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__qe1K)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "auto"
              : "76.999px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "138px"
              : "168.999px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group2.svg",
            fullWidth: 168.999,
            fullHeight: 76.999,
            aspectRatio: 2.194805
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___3J4U6)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "auto" : "87px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "100px"
              : "152.999px"
          }
          loading={"lazy"}
          src={{
            src: "/plasmic/fb_diff_style_deployments/images/group4.svg",
            fullWidth: 152.999,
            fullHeight: 87,
            aspectRatio: 1.758621
          }}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section2: ["section2", "subHeading", "logoContainer"],
  subHeading: ["subHeading"],
  logoContainer: ["logoContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section2: "section";
  subHeading: "h2";
  logoContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection2__VariantsArgs;
    args?: PlasmicSection2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection2__ArgProps,
          internalVariantPropNames: PlasmicSection2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section2") {
    func.displayName = "PlasmicSection2";
  } else {
    func.displayName = `PlasmicSection2.${nodeName}`;
  }
  return func;
}

export const PlasmicSection2 = Object.assign(
  // Top-level PlasmicSection2 renders the root element
  makeNodeComponent("section2"),
  {
    // Helper components rendering sub-elements
    subHeading: makeNodeComponent("subHeading"),
    logoContainer: makeNodeComponent("logoContainer"),

    // Metadata about props expected for PlasmicSection2
    internalVariantProps: PlasmicSection2__VariantProps,
    internalArgProps: PlasmicSection2__ArgProps
  }
);

export default PlasmicSection2;
/* prettier-ignore-end */
