// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m7fbwwwhvmCQvGDQZtaomB
// Component: MpLj7iG0nsQj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: I4QQYc_H8onv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: m7fbwwwhvmCQvGDQZtaomB/projectcss
import sty from "./PlasmicLayoutFooter.module.css"; // plasmic-import: MpLj7iG0nsQj/css

createPlasmicElementProxy;

export type PlasmicLayoutFooter__VariantMembers = {};
export type PlasmicLayoutFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicLayoutFooter__VariantsArgs;
export const PlasmicLayoutFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicLayoutFooter__ArgsType = {};
type ArgPropType = keyof PlasmicLayoutFooter__ArgsType;
export const PlasmicLayoutFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicLayoutFooter__OverridesType = {
  footer?: Flex__<"footer">;
  columns?: Flex__<"div">;
  footerLogo?: Flex__<"div">;
  logo2?: Flex__<typeof PlasmicImg__>;
  footerLink?: Flex__<"a"> & Partial<LinkProps>;
  footerLink2?: Flex__<"a"> & Partial<LinkProps>;
  footerLink4?: Flex__<"a"> & Partial<LinkProps>;
  footerLink5?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultLayoutFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLayoutFooter__RenderFunc(props: {
  variants: PlasmicLayoutFooter__VariantsArgs;
  args: PlasmicLayoutFooter__ArgsType;
  overrides: PlasmicLayoutFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <footer
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.footer,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__kg7Hp)}>
          <div
            data-plasmic-name={"footerLogo"}
            data-plasmic-override={overrides.footerLogo}
            className={classNames(projectcss.all, sty.footerLogo)}
          >
            <PlasmicImg__
              data-plasmic-name={"logo2"}
              data-plasmic-override={overrides.logo2}
              alt={""}
              className={classNames(sty.logo2)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"300px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/fb_diff_style_deployments/images/image9.png",
                fullWidth: 374,
                fullHeight: 156,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__mjMzN)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__eenuG
            )}
          >
            {"Company"}
          </h3>
          <PlasmicLink__
            data-plasmic-name={"footerLink"}
            data-plasmic-override={overrides.footerLink}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Story"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"footerLink2"}
            data-plasmic-override={overrides.footerLink2}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink2
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Pricing"}
          </PlasmicLink__>
        </div>
        <div className={classNames(projectcss.all, sty.column__pfnRr)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__da8Ef
            )}
          >
            {"Legal"}
          </h3>
          <PlasmicLink__
            data-plasmic-name={"footerLink4"}
            data-plasmic-override={overrides.footerLink4}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink4
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Terms & Conditions"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"footerLink5"}
            data-plasmic-override={overrides.footerLink5}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink5
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Privacy Policy"}
          </PlasmicLink__>
        </div>
      </div>
    </footer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "columns",
    "footerLogo",
    "logo2",
    "footerLink",
    "footerLink2",
    "footerLink4",
    "footerLink5"
  ],
  columns: [
    "columns",
    "footerLogo",
    "logo2",
    "footerLink",
    "footerLink2",
    "footerLink4",
    "footerLink5"
  ],
  footerLogo: ["footerLogo", "logo2"],
  logo2: ["logo2"],
  footerLink: ["footerLink"],
  footerLink2: ["footerLink2"],
  footerLink4: ["footerLink4"],
  footerLink5: ["footerLink5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "footer";
  columns: "div";
  footerLogo: "div";
  logo2: typeof PlasmicImg__;
  footerLink: "a";
  footerLink2: "a";
  footerLink4: "a";
  footerLink5: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayoutFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayoutFooter__VariantsArgs;
    args?: PlasmicLayoutFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayoutFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLayoutFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLayoutFooter__ArgProps,
          internalVariantPropNames: PlasmicLayoutFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLayoutFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicLayoutFooter";
  } else {
    func.displayName = `PlasmicLayoutFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicLayoutFooter = Object.assign(
  // Top-level PlasmicLayoutFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    footerLogo: makeNodeComponent("footerLogo"),
    logo2: makeNodeComponent("logo2"),
    footerLink: makeNodeComponent("footerLink"),
    footerLink2: makeNodeComponent("footerLink2"),
    footerLink4: makeNodeComponent("footerLink4"),
    footerLink5: makeNodeComponent("footerLink5"),

    // Metadata about props expected for PlasmicLayoutFooter
    internalVariantProps: PlasmicLayoutFooter__VariantProps,
    internalArgProps: PlasmicLayoutFooter__ArgProps
  }
);

export default PlasmicLayoutFooter;
/* prettier-ignore-end */
